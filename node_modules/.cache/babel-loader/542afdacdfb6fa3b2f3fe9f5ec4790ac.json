{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\steph\\\\Documents\\\\GitHub\\\\724events\\\\src\\\\containers\\\\Events\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport EventCard from \"../../components/EventCard\";\nimport Select from \"../../components/Select\";\nimport { useData } from \"../../contexts/DataContext\";\nimport Modal from \"../Modal\";\nimport ModalEvent from \"../ModalEvent\";\nimport \"./style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst perPage = 9;\n\nconst EventList = () => {\n  _s();\n\n  const {\n    data,\n    error\n  } = useData();\n  const [type, setType] = useState();\n  const [currentPage, setCurrentPage] = useState(1); // Calcul de l'indice de début de la pagination\n\n  const startIdx = (currentPage - 1) * perPage; // Calcul de l'indice de fin de la pagination\n\n  const endIdx = currentPage * perPage; // Filtrage des événements en fonction du type sélectionné\n\n  const filteredEvents = (type ? data === null || data === void 0 ? void 0 : data.events.filter(event => event.type === type) : data === null || data === void 0 ? void 0 : data.events) || []; // Sélection des événements pour la page actuelle\n\n  const paginatedEvents = filteredEvents.slice(startIdx, endIdx);\n\n  const changeType = evtType => {\n    // Réinitialisation de la page lorsqu'un nouveau type est sélectionné\n    setCurrentPage(1);\n    setType(evtType);\n  }; // Calcul du nombre de pages nécessaires avec Math.ceil\n\n\n  const pageNumber = Math.ceil(filteredEvents.length / perPage);\n  const typeList = new Set(data === null || data === void 0 ? void 0 : data.events.map(event => event.type));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"An error occurred\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }, this), data === null ? \"loading\" : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"SelectTitle\",\n        children: \"Cat\\xE9gories\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        selection: Array.from(typeList),\n        onChange: value => value ? changeType(value) : changeType(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"events\",\n        className: \"ListContainer\",\n        children: paginatedEvents.map(event => /*#__PURE__*/_jsxDEV(Modal, {\n          Content: /*#__PURE__*/_jsxDEV(ModalEvent, {\n            event: event\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 46\n          }, this),\n          children: _ref => {\n            let {\n              setIsOpened\n            } = _ref;\n            return /*#__PURE__*/_jsxDEV(EventCard, {\n              onClick: () => setIsOpened(true),\n              imageSrc: event.cover,\n              title: event.title,\n              date: new Date(event.date),\n              label: event.type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 19\n            }, this);\n          }\n        }, event.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Pagination\",\n        children: [...Array(pageNumber)].map((_, n) =>\n        /*#__PURE__*/\n        // eslint-disable-next-line react/no-array-index-key\n        _jsxDEV(\"a\", {\n          href: \"#events\",\n          onClick: () => setCurrentPage(n + 1),\n          children: n + 1\n        }, n + 1, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n};\n\n_s(EventList, \"tBxh+fVpKDnVW3tMmU3S4L1bPJA=\", false, function () {\n  return [useData];\n});\n\n_c = EventList;\nexport default EventList;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventList\");","map":{"version":3,"sources":["C:/Users/steph/Documents/GitHub/724events/src/containers/Events/index.js"],"names":["useState","EventCard","Select","useData","Modal","ModalEvent","perPage","EventList","data","error","type","setType","currentPage","setCurrentPage","startIdx","endIdx","filteredEvents","events","filter","event","paginatedEvents","slice","changeType","evtType","pageNumber","Math","ceil","length","typeList","Set","map","Array","from","value","setIsOpened","cover","title","Date","date","id","_","n"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport EventCard from \"../../components/EventCard\";\r\nimport Select from \"../../components/Select\";\r\nimport { useData } from \"../../contexts/DataContext\";\r\nimport Modal from \"../Modal\";\r\nimport ModalEvent from \"../ModalEvent\";\r\n\r\nimport \"./style.css\";\r\n\r\nconst perPage = 9;\r\n\r\nconst EventList = () => {\r\n  const { data, error } = useData();\r\n  const [type, setType] = useState();\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  // Calcul de l'indice de début de la pagination\r\n  const startIdx = (currentPage - 1) * perPage;\r\n  // Calcul de l'indice de fin de la pagination\r\n  const endIdx = currentPage * perPage;\r\n\r\n  // Filtrage des événements en fonction du type sélectionné\r\n  const filteredEvents =\r\n    (type\r\n      ? data?.events.filter((event) => event.type === type)\r\n      : data?.events) || [];\r\n\r\n  // Sélection des événements pour la page actuelle\r\n  const paginatedEvents = filteredEvents.slice(startIdx, endIdx);\r\n\r\n  const changeType = (evtType) => {\r\n    // Réinitialisation de la page lorsqu'un nouveau type est sélectionné\r\n    setCurrentPage(1);\r\n    setType(evtType);\r\n  };  \r\n\r\n  // Calcul du nombre de pages nécessaires avec Math.ceil\r\n  const pageNumber = Math.ceil(filteredEvents.length / perPage);\r\n  const typeList = new Set(data?.events.map((event) => event.type));\r\n\r\n  return (\r\n    <>\r\n      {error && <div>An error occurred</div>}\r\n      {data === null ? (\r\n        \"loading\"\r\n      ) : (\r\n        <>\r\n          <h3 className=\"SelectTitle\">Catégories</h3>\r\n          <Select\r\n            selection={Array.from(typeList)}\r\n            onChange={(value) => (value ? changeType(value) : changeType(null))}\r\n          />\r\n          <div id=\"events\" className=\"ListContainer\">\r\n            {paginatedEvents.map((event) => (\r\n              <Modal key={event.id} Content={<ModalEvent event={event} />}>\r\n                {({ setIsOpened }) => (\r\n                  <EventCard\r\n                    onClick={() => setIsOpened(true)}\r\n                    imageSrc={event.cover}\r\n                    title={event.title}\r\n                    date={new Date(event.date)}\r\n                    label={event.type}\r\n                  />\r\n                )}\r\n              </Modal>\r\n            ))}\r\n          </div>\r\n          <div className=\"Pagination\">\r\n            {[...Array(pageNumber)].map((_, n) => (\r\n              // eslint-disable-next-line react/no-array-index-key\r\n              <a key={n + 1} href=\"#events\" onClick={() => setCurrentPage(n + 1)}>\r\n                {n + 1}\r\n              </a>\r\n            ))}\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EventList;"]},"metadata":{},"sourceType":"module"}